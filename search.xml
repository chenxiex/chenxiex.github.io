<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>noip2018提高组d2t1旅行解题报告</title>
    <url>/2019/08/01/noip2018%E6%8F%90%E9%AB%98%E7%BB%84d2t1%E6%97%85%E8%A1%8C%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>本题题目中有个很明显的暗示，暗示本题采用dfs算法。即“每次可以选择一条与当前城市相连的道路，走向一个没有去过的城市，或者沿着第一次访问该城市时经过的道路后退到上一个城市。”可以前进或者退回上一个，正好契合dfs的实现。所以这道题采用dfs。</p>
<a id="more"></a>
<p>题目中还有一个很重要的条件，就是“m = n − 1 或 m=n。”这意味着题目给出的图要么是树要么是基环树。对于数，只要贪心dfs，从1开始每次选择小的节点即可。对于基环树，需要先枚举删掉一条边，然后按照树的方法尝试dfs，最后找到最优解。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct s1</span><br><span class="line">&#123;</span><br><span class="line">    long x,y;</span><br><span class="line">    long next;</span><br><span class="line">&#125;;</span><br><span class="line">long n,m; s1 edge[10050]; long yx[5050],yy[5050],first[5050],tot&#x3D;1,ans[5050],tot1&#x3D;0,sx&#x3D;0,sy&#x3D;0,ans1[5050]; bool s[5050];</span><br><span class="line">void add(long x,long y)</span><br><span class="line">&#123;</span><br><span class="line">    edge[tot].x&#x3D;x;</span><br><span class="line">    edge[tot].y&#x3D;y;</span><br><span class="line">    edge[tot].next&#x3D;first[x];</span><br><span class="line">    first[x]&#x3D;tot;</span><br><span class="line">    tot++;</span><br><span class="line">&#125;</span><br><span class="line">void pre(long x)</span><br><span class="line">&#123;</span><br><span class="line">    long a[5050];</span><br><span class="line">    memset(a,0,sizeof(a));</span><br><span class="line">    long k&#x3D;0;</span><br><span class="line">	for(long i&#x3D;first[x];i!&#x3D;-1;i&#x3D;edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        long y&#x3D;edge[i].y;  </span><br><span class="line">        a[++k]&#x3D;y;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(a+1,a+k+1);</span><br><span class="line">	long j&#x3D;1;</span><br><span class="line">	for(long i&#x3D;first[x];i!&#x3D;-1;i&#x3D;edge[i].next)&#123;</span><br><span class="line">	 edge[i].y&#x3D;a[j];</span><br><span class="line">	 j++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">void dfs1(long node,long fa)</span><br><span class="line">&#123;</span><br><span class="line">    ans[++tot1]&#x3D;node;</span><br><span class="line">    for (long i&#x3D;first[node];i!&#x3D;-1;i&#x3D;edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        if (edge[i].y&#x3D;&#x3D;fa) continue;</span><br><span class="line">        dfs1(edge[i].y,node);</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line">void dfs2(long node,long fa)</span><br><span class="line">&#123;</span><br><span class="line">    s[node]&#x3D;true;</span><br><span class="line">    ans1[++tot1]&#x3D;node;</span><br><span class="line">    for (long i&#x3D;first[node];i!&#x3D;-1;i&#x3D;edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        long y&#x3D;edge[i].y;</span><br><span class="line">        if (y&#x3D;&#x3D;fa||s[y]) continue;</span><br><span class="line">        if (y&#x3D;&#x3D;sy&amp;&amp;edge[i].x&#x3D;&#x3D;sx||edge[i].x&#x3D;&#x3D;sy&amp;&amp;y&#x3D;&#x3D;sx) continue;</span><br><span class="line">        dfs2(y,node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bool check()</span><br><span class="line">&#123;</span><br><span class="line">    for (long i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (ans[i]&gt;ans1[i]) return true;</span><br><span class="line">        if (ans[i]&lt;ans1[i]) return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    memset(first,-1,sizeof(first));</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    for (long i&#x3D;1;i&lt;&#x3D;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;yx[i]&gt;&gt;yy[i];</span><br><span class="line">        add(yx[i],yy[i]);</span><br><span class="line">        add(yy[i],yx[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    for (long i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre(i);</span><br><span class="line">    &#125;</span><br><span class="line">    if (m!&#x3D;n)</span><br><span class="line">    &#123;</span><br><span class="line">        dfs1(1,0);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        memset(ans,0x3f,sizeof(ans));</span><br><span class="line">        for (long i&#x3D;1;i&lt;&#x3D;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tot1&#x3D;0;</span><br><span class="line">            sx&#x3D;yx[i]; sy&#x3D;yy[i];</span><br><span class="line">            memset(s,false,sizeof(s));</span><br><span class="line">            memset(ans1,0,sizeof(ans1));</span><br><span class="line">            dfs2(1,0);</span><br><span class="line">            if (tot1&lt;n) continue;</span><br><span class="line">            if (!check()) continue;</span><br><span class="line">            for (long j&#x3D;1;j&lt;&#x3D;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[j]&#x3D;ans1[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (long i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;ans[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>解题报告</tag>
      </tags>
  </entry>
  <entry>
    <title>noip2018提高组d1t2货币系统解题报告</title>
    <url>/2019/07/31/noip2018%E6%8F%90%E9%AB%98%E7%BB%84d1t2%E8%B4%A7%E5%B8%81%E7%B3%BB%E7%BB%9F%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题神似noip2017里面的小凯的疑惑，但是好想很多。</p>
<a id="more"></a>
<p>显然，在这道题中，对于一个货币系统如果有一个货币面值可以被其它面值的货币表示出来，那么这个货币面值就可以被删掉（因为完全可以由其它的代替）。但是，如果一个货币面值无法被其它面值的货币表示出来，那么它就一定不能删掉，不然会导致有一些本来可以被组出来的组不出来（最明显的例子就是它本身）。所以，我们只要找出可以被其它面值的货币表示出来的货币面值数量，从总数中减去就好了。这可以用完全背包实现。根据常识，因为面值都是非负的，所以每个面值只有可能被比它小的面值组成，所以先排序，再从小到大进行完全背包即可。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">long t; long n,a[150]; bool f[30000];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    for (long i&#x3D;0;i&lt;t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        memset(a,0,sizeof(a));</span><br><span class="line">        memset(f,false,sizeof(f));</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        long ans&#x3D;n;</span><br><span class="line">        for (long j&#x3D;0;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        f[0]&#x3D;true;</span><br><span class="line">        sort(a,a+n);</span><br><span class="line">        for (long j&#x3D;0;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (f[a[j]])</span><br><span class="line">            &#123;</span><br><span class="line">                ans--;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            for (long k&#x3D;a[j];k&lt;&#x3D;a[n-1];k++)</span><br><span class="line">            &#123;</span><br><span class="line">                f[k]&#x3D;(f[k]||f[k-a[j]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>解题报告</tag>
      </tags>
  </entry>
  <entry>
    <title>noip2017提高组d2t2宝藏解题报告</title>
    <url>/2019/07/31/noip2017%E6%8F%90%E9%AB%98%E7%BB%84d2t2%E5%AE%9D%E8%97%8F%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>因为不知道怎么dp，所以就写了个dfs。</p>
<a id="more"></a>
<p>每次dfs枚举所有已扩展的点和要扩展的点，逐一连接尝试就行。加上最优化剪枝和搜索序的改进（每次优先扩展短的道路）还有一些小剪枝后就可以了。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">long n,m,ans&#x3D;0x3f3f3f3f,to[20][20],num[20],d[20],a[20][20],tmp&#x3D;0,p,s[20],tot,cnt;</span><br><span class="line">bool cmp(int c, int b) </span><br><span class="line">&#123;</span><br><span class="line">    return a[p][c]&lt;a[p][b];</span><br><span class="line">&#125;</span><br><span class="line">void dfs(long ncnt,long node)</span><br><span class="line">&#123;</span><br><span class="line">    for (long i&#x3D;ncnt;i&lt;&#x3D;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        long i1&#x3D;s[i];</span><br><span class="line">        if (tot+tmp*d[i1]&gt;&#x3D;ans) return;</span><br><span class="line">        for (long j&#x3D;node;j&lt;&#x3D;num[i1];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (d[to[i1][j]]&#x3D;&#x3D;0)</span><br><span class="line">            &#123;</span><br><span class="line">                long j1&#x3D;to[i1][j];</span><br><span class="line">                s[++cnt]&#x3D;j1;</span><br><span class="line">                d[j1]&#x3D;d[i1]+1;</span><br><span class="line">                tmp-&#x3D;a[j1][to[j1][1]];</span><br><span class="line">                long tot1&#x3D;tot;</span><br><span class="line">                tot+&#x3D;a[i1][j1]*d[i1];</span><br><span class="line">                dfs(i,j+1);</span><br><span class="line">                d[j1]&#x3D;0;</span><br><span class="line">                tmp+&#x3D;a[j1][to[j1][1]];</span><br><span class="line">                tot&#x3D;tot1;</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        node&#x3D;1;</span><br><span class="line">    &#125;</span><br><span class="line">    if (cnt&#x3D;&#x3D;n)</span><br><span class="line">    &#123;</span><br><span class="line">        ans&#x3D;min(ans,tot);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    memset(a,0x3f,sizeof(a));</span><br><span class="line">    for (long i&#x3D;0;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        long x,y,z;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">        if (z&gt;a[x][y]) continue;</span><br><span class="line">        if (a[x][y]&#x3D;&#x3D;0x3f3f3f3f)</span><br><span class="line">        &#123;</span><br><span class="line">            to[x][++num[x]]&#x3D;y; to[y][++num[y]]&#x3D;x;</span><br><span class="line">        &#125;</span><br><span class="line">        a[x][y]&#x3D;a[y][x]&#x3D;z;</span><br><span class="line">    &#125;</span><br><span class="line">    for(long i&#x3D;1;i&lt;&#x3D;n;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        p&#x3D;i;</span><br><span class="line">        sort(to[i]+1,to[i]+num[i]+1,cmp);</span><br><span class="line">        tmp+&#x3D;a[i][to[i][1]];</span><br><span class="line">    &#125;</span><br><span class="line">    for (long i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        memset(s,0,sizeof(s));</span><br><span class="line">        tot&#x3D;0; cnt&#x3D;1;</span><br><span class="line">        s[1]&#x3D;i;</span><br><span class="line">        tmp-&#x3D;a[i][to[i][1]];</span><br><span class="line">        d[i]&#x3D;1;</span><br><span class="line">        dfs(1,1);</span><br><span class="line">        d[i]&#x3D;0;</span><br><span class="line">        tmp+&#x3D;a[i][to[i][1]];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>解题报告</tag>
      </tags>
  </entry>
  <entry>
    <title>noip2018提高组d1t1铺设道路解题报告</title>
    <url>/2019/07/30/noip2018%E6%8F%90%E9%AB%98%E7%BB%84d1t1%E9%93%BA%E8%AE%BE%E9%81%93%E8%B7%AF%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>用笔算模拟了几组数据，发现是贪心。即对于每个坑，如果它比前面的坑大，就把它填到和前面的坑一样平，最后在一起填掉就行。</p>
<a id="more"></a>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">long n,ans; long a[100005];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for (long i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        if (a[i]&gt;a[i-1]) ans+&#x3D;a[i]-a[i-1];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>解题报告</tag>
      </tags>
  </entry>
  <entry>
    <title>noip2017提高组d2t1奶酪解题报告</title>
    <url>/2019/07/29/noip2017%E6%8F%90%E9%AB%98%E7%BB%84d2t1%E5%A5%B6%E9%85%AA%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>因为是关于路径的问题，所以想到了用最短路(spfa)来写。</p>
<a id="more"></a>
<p>因为只需考虑能不能而无需考虑路径长，所以只要设定一个数组标记每个空洞是否与底面连通，然后将这些空洞全部入队，之后逐一出队并更新与这些空洞相交或相切的空洞，再将这些空洞也入队来更新其它的空洞。如果有与顶面连通的空洞入队则代表能，如果队列空了也找不到与顶面连通的点就代表不能。另外，因为每个点无需重复入队出队，所以队列的大小设为n即可。</p>
<p>另外，为了节省时间以及考虑只有一个空洞的情况，还应在输入时判断是否有空洞直接连通顶面和底面，如果有就存在从底面到顶面的路径，无需跑最短路。但是还是需要将所有数据读入完了才能退出循环，不能直接break，否则会导致程序无法结束。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct s1</span><br><span class="line">&#123;</span><br><span class="line">    long x,y,z;</span><br><span class="line">&#125;;</span><br><span class="line">long t,n,h,r; s1 hole[10001]; bool d[10001]&#x3D;&#123;false&#125;; long q[10001],qh&#x3D;0,qt&#x3D;0;</span><br><span class="line">double dist(long i,long j)</span><br><span class="line">&#123;</span><br><span class="line">    long x1&#x3D;hole[i].x,x2&#x3D;hole[j].x,y1&#x3D;hole[i].y,y2&#x3D;hole[j].y,z1&#x3D;hole[i].z,z2&#x3D;hole[j].z;</span><br><span class="line">    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2));</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    for (long i&#x3D;0;i&lt;t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        memset(d,false,sizeof(d));</span><br><span class="line">        memset(hole,0,sizeof(hole));</span><br><span class="line">        memset(q,-1,sizeof(q));</span><br><span class="line">        qh&#x3D;0; qt&#x3D;0;</span><br><span class="line">        cin&gt;&gt;n&gt;&gt;h&gt;&gt;r;</span><br><span class="line">        bool f&#x3D;false;</span><br><span class="line">        for (long j&#x3D;0;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;hole[j].x&gt;&gt;hole[j].y&gt;&gt;hole[j].z;</span><br><span class="line">            if (hole[j].z&lt;&#x3D;r) </span><br><span class="line">            &#123;</span><br><span class="line">                d[j]&#x3D;true;</span><br><span class="line">                q[qt++]&#x3D;j;</span><br><span class="line">                if (hole[j].z+r&gt;&#x3D;h)</span><br><span class="line">                &#123;</span><br><span class="line">                    f&#x3D;true;&#x2F;&#x2F;此处不能直接break</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        while (qh&lt;qt&amp;&amp;!f)</span><br><span class="line">        &#123;</span><br><span class="line">            for (long j&#x3D;0;j&lt;n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (!d[j]&amp;&amp;dist(q[qh],j)&lt;&#x3D;2*r)</span><br><span class="line">                &#123;</span><br><span class="line">                    d[j]&#x3D;true;</span><br><span class="line">                    q[qt++]&#x3D;j;</span><br><span class="line">                    if (hole[j].z+r&gt;&#x3D;h)</span><br><span class="line">                    &#123;</span><br><span class="line">                        f&#x3D;true;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            qh++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;(f?&quot;Yes&quot;:&quot;No&quot;)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>noip</tag>
        <tag>解题报告</tag>
      </tags>
  </entry>
  <entry>
    <title>noip2017提高组d1t2时间复杂度解题报告</title>
    <url>/2019/07/28/noip2017%E6%8F%90%E9%AB%98%E7%BB%84d1t2%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>很明显是一道用栈的模拟题。但是由于输入格式比较特殊，涉及到字符串处理，且情况比较多，需小心调试。</p>
<a id="more"></a>
<p>首先要解决的就是输入问题。因为有空格或回车符分隔，所以可以直接用cin读入t和l，然后用getline读入时间复杂度和代码。时间复杂度用字符串o存储，代码用字符串数组r存储。</p>
<p>然后要解决字符串的处理问题。可以用一个子程序提取字符串中的数据。这里用子程序getn来提取字符串中第一个数或n。如果提取到数则返回数，提取到n则返回-1234。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">long getn(string a)</span><br><span class="line">&#123;</span><br><span class="line">    long ans&#x3D;0;</span><br><span class="line">    bool f&#x3D;false;</span><br><span class="line">    for (long i&#x3D;0;i&lt;a.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (a[i]&#x3D;&#x3D;&#39;n&#39;) return -1234;</span><br><span class="line">        if (a[i]&gt;&#x3D;&#39;0&#39;&amp;&amp;a[i]&lt;&#x3D;&#39;9&#39;)</span><br><span class="line">        &#123;</span><br><span class="line">            f&#x3D;true;</span><br><span class="line">            ans&#x3D;ans*10+(a[i]-&#39;0&#39;);</span><br><span class="line">            continue;</span><br><span class="line">        &#125; </span><br><span class="line">        if (f) return ans;</span><br><span class="line">    &#125;</span><br><span class="line">    if (f) return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为本题中时间复杂度实际上就是由n的次数(w)决定的，所以用子程序geto提取输入的时间复杂度存储在变量w中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void geto(string o)</span><br><span class="line">&#123;</span><br><span class="line">    long p&#x3D;o.find(&quot;(&quot;);</span><br><span class="line">    if (o[p+1]&#x3D;&#x3D;&#39;1&#39;)</span><br><span class="line">    &#123;</span><br><span class="line">        w&#x3D;0;</span><br><span class="line">        return;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        p&#x3D;o.find(&quot;^&quot;);</span><br><span class="line">        string a1&#x3D;o.substr(p+1,o.size()-p);</span><br><span class="line">        w&#x3D;getn(a1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后就进入问题的核心了。首先明确目的有两个：计算时间复杂度和判错。判错这里有个简单的优化：如果程序行数为奇数，则循环一定无法配对，是错的，可以直接输出ERR并continue。如果是偶数，就模拟循环。先不考虑程序有错误的情况。用字符数组z来模拟栈。如果一行程序以’F’开头则压栈(将变量名i存入栈中)，并提取出起始值x和终值y。如果x!=n且y=n，就将次数qw+1，否则为常数次数，无需理会。如果以’E’开头则弹栈。</p>
<p>接下来再考虑有错误的情况。有以下几种：</p>
<ol>
<li>‘F’比’E’多：只需在子程序退出前检查栈是否为空即可。</li>
<li>‘E’比’F’多：只需在弹栈是检查有无错误即可。</li>
<li>x比y大：这种情况下，程序并不会进入循环。只需定义一个标记变量flag，在进入这个循环压栈时标记，之后的代码正常压栈弹栈但不计数，在退出这个循环时取消标记即可。</li>
</ol>
<p>还有一个特殊情况就是有多个循环并列。此时要引入一个布尔型数组yx。yx[i]标记栈中i号元素(z[i])入栈时是否进行了次数的计数。如果有，则在该元素弹栈时要将次数减1。</p>
<p>最后，在每次弹栈前判断，使答案mqw等于最大的求得次数qw，之后判断mqw==w？即可。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">long t,l,w,qw&#x3D;0,mqw&#x3D;0,t1&#x3D;0; string r[101],o; bool f[30]&#x3D;&#123;false&#125;,yx[201]&#x3D;&#123;false&#125;; char z[201],flag&#x3D;&#39;0&#39;;</span><br><span class="line">long getn(string a)</span><br><span class="line">&#123;</span><br><span class="line">    long ans&#x3D;0;</span><br><span class="line">    bool f&#x3D;false;</span><br><span class="line">    for (long i&#x3D;0;i&lt;a.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (a[i]&#x3D;&#x3D;&#39;n&#39;) return -1234;</span><br><span class="line">        if (a[i]&gt;&#x3D;&#39;0&#39;&amp;&amp;a[i]&lt;&#x3D;&#39;9&#39;)</span><br><span class="line">        &#123;</span><br><span class="line">            f&#x3D;true;</span><br><span class="line">            ans&#x3D;ans*10+(a[i]-&#39;0&#39;);</span><br><span class="line">            continue;</span><br><span class="line">        &#125; </span><br><span class="line">        if (f) return ans;</span><br><span class="line">    &#125;</span><br><span class="line">    if (f) return ans;</span><br><span class="line">&#125;</span><br><span class="line">void geto(string o)</span><br><span class="line">&#123;</span><br><span class="line">    long p&#x3D;o.find(&quot;(&quot;);</span><br><span class="line">    if (o[p+1]&#x3D;&#x3D;&#39;1&#39;)</span><br><span class="line">    &#123;</span><br><span class="line">        w&#x3D;0;</span><br><span class="line">        return;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        p&#x3D;o.find(&quot;^&quot;);</span><br><span class="line">        string a1&#x3D;o.substr(p+1,o.size()-p);</span><br><span class="line">        w&#x3D;getn(a1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bool xh()</span><br><span class="line">&#123;</span><br><span class="line">    for (long i&#x3D;0;i&lt;l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (r[i][0]&#x3D;&#x3D;&#39;F&#39;)</span><br><span class="line">        &#123;</span><br><span class="line">            char bl&#x3D;r[i][2];</span><br><span class="line">            if (f[(bl-&#39;a&#39;)]) return false;</span><br><span class="line">            z[t1++]&#x3D;bl;</span><br><span class="line">            f[(bl-&#39;a&#39;)]&#x3D;true;</span><br><span class="line">            string num&#x3D;r[i].substr(4,r[i].size()-3);</span><br><span class="line">            long beg&#x3D;0,end&#x3D;0;</span><br><span class="line">            beg&#x3D;getn(num);</span><br><span class="line">            num.erase(0,num.find(&quot; &quot;));</span><br><span class="line">            end&#x3D;getn(num);</span><br><span class="line">            if (beg&#x3D;&#x3D;-1234&amp;&amp;end!&#x3D;-1234||beg&gt;end&amp;&amp;end!&#x3D;-1234)</span><br><span class="line">            &#123;</span><br><span class="line">                flag&#x3D;bl;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                if (end&#x3D;&#x3D;-1234&amp;&amp;beg!&#x3D;-1234&amp;&amp;flag&#x3D;&#x3D;&#39;0&#39;) </span><br><span class="line">                &#123;</span><br><span class="line">                    yx[t1-1]&#x3D;true;</span><br><span class="line">                    qw++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (r[i][0]&#x3D;&#x3D;&#39;E&#39;)</span><br><span class="line">        &#123;</span><br><span class="line">            if (t1&#x3D;&#x3D;0) return false;</span><br><span class="line">            mqw&#x3D;max(mqw,qw);</span><br><span class="line">            t1--;</span><br><span class="line">            if (yx[t1]) qw--;</span><br><span class="line">            f[(z[t1]-&#39;a&#39;)]&#x3D;false;</span><br><span class="line">            yx[t1]&#x3D;false;</span><br><span class="line">            if (z[t1]&#x3D;&#x3D;flag) flag&#x3D;&#39;0&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (t1!&#x3D;0) return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    for (long i&#x3D;0;i&lt;t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;l;</span><br><span class="line">        mqw&#x3D;0;</span><br><span class="line">        qw&#x3D;0;</span><br><span class="line">        t1&#x3D;0;</span><br><span class="line">        flag&#x3D;&#39;0&#39;;</span><br><span class="line">        memset(z,0,sizeof(z));</span><br><span class="line">        memset(f,false,sizeof(f));</span><br><span class="line">        memset(yx,false,sizeof(yx));</span><br><span class="line">        getline(cin,o);</span><br><span class="line">        geto(o);</span><br><span class="line">        for (long j&#x3D;0;j&lt;l;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            getline(cin,r[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        if (l%2!&#x3D;0)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;&quot;ERR&quot;&lt;&lt;endl;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if (xh()) </span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;(mqw&#x3D;&#x3D;w?&quot;Yes&quot;:&quot;No&quot;)&#x2F;*&lt;&lt;&quot; &quot;&lt;&lt;mqw *&#x2F;&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        else cout&lt;&lt;&quot;ERR&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>noip</tag>
        <tag>解题报告</tag>
      </tags>
  </entry>
  <entry>
    <title>noip2017提高组d1t1小凯的疑惑题解</title>
    <url>/2019/07/19/noip2017%E6%8F%90%E9%AB%98%E7%BB%84d1t1%E5%B0%8F%E5%87%AF%E7%9A%84%E7%96%91%E6%83%91%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>很明显是到数学题。题意可转换为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于两个互质的正整数a,b,有正整数n≠a*c+b*d(c,d均为非负整数),求n的最大值。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li><p>因为a,b互质，可以发现{0*a%b,1*a%b,(2*a)%b,(3*a)%b…((b-1)*a)%b}刚好组成了{0,1,2…b-1},即整数整除b的所有可能余数;</p>
</li>
<li><p>设x=a*c+b*d,则x%b=(a*c+b*d)%d,即x%b=a*c%b。可以得出当x%b=a*c%b时,x可表示为a*c+b*d;</p>
</li>
<li><p>因为x=a*c+b*d,a*c、b*d都为非负整数,所以a*c&lt;=x。</p>
</li>
</ol>
<p>当x&gt;=(b-1)a时,由1.和2.可知,此时a*c%b=x%b,所以x一定可表示为a*c+b*d。</p>
<p>当x&lt;(b-1)a时,a*c&lt;(b-1)a,a*c%b就取不到整数整除b的所有可能余数,x%b不一定等于a*c%b。</p>
<p>所以n&lt;(b-1)a。另外可以知道a*c=(b-1)a-1时，取不到的余数就是(b-1)a%b,所以当n%b=(b-1)a%b且n取最大值时即为所求。</p>
<p>易得若n%m=z,则[n-(ym)]%m=z(y为非负整数)。</p>
<p>因为(b-1)a%b=(b-1)a%b,又因为n取最大值,所以n=(b-1)a-b,即n=ab-a-b。</p>
<p>至此题目解决。</p>
<h3 id="通过代码"><a href="#通过代码" class="headerlink" title="通过代码"></a>通过代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    long long a,b; &#x2F;&#x2F;注意要用long long,否则会爆</span><br><span class="line">    scanf(&quot;%lld%lld&quot;,&amp;a,&amp;b);</span><br><span class="line">    printf(&quot;%lld&quot;,a*b-a-b);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>noip</tag>
        <tag>解题报告</tag>
      </tags>
  </entry>
  <entry>
    <title>信息学奥赛一本通题库P1366二叉树输出btout</title>
    <url>/2019/04/11/%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%A5%A5%E8%B5%9B%E4%B8%80%E6%9C%AC%E9%80%9A%E9%A2%98%E5%BA%93P1366%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BE%93%E5%87%BAbtout/</url>
    <content><![CDATA[<p>题目链接： <a href="http://ybt.ssoier.cn:8088/problem_show.php?pid=1366" target="_blank" rel="noopener">P1366二叉树输出</a><br>题目：<br>【题目描述】</p>
<p>树的凹入表示法主要用于树的屏幕或打印输出，其表示的基本思想是兄弟间等长，一个结点的长度要不小于其子结点的长度。二叉树也可以这样表示，假设叶结点的长度为1，一个非叶结点的长度等于它的左右子树的长度之和。</p>
<a id="more"></a>
<p>一棵二叉树的一个结点用一个字母表示（无重复），输出时从根结点开始：</p>
<p>每行输出若干个结点字符（相同字符的个数等于该结点长度），</p>
<p>如果该结点有左子树就递归输出左子树；</p>
<p>如果该结点有右子树就递归输出右子树。</p>
<p>假定一棵二叉树一个结点用一个字符描述，现在给出先序和中序遍历的字符串，用树的凹入表示法输出该二叉树。</p>
<p>【输入】</p>
<p>两行，每行是由字母组成的字符串（一行的每个字符都是唯一的），分别表示二叉树的先序遍历和中序遍历的序列。</p>
<p>【输出】</p>
<p>行数等于该树的结点数，每行的字母相同。</p>
<p>【输入样例】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ABCDEFG</span><br><span class="line">CBDAFEG</span><br></pre></td></tr></table></figure>
<p>【输出样例】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AAAA</span><br><span class="line">BB</span><br><span class="line">C</span><br><span class="line">D</span><br><span class="line">EE</span><br><span class="line">F</span><br><span class="line">G</span><br></pre></td></tr></table></figure>

<p>解题思路：</p>
<p>1.看到这道题的时候，第一个想法是建树，根据先序遍历和中序遍历，用一个结构体(struct)数组来存储树，记录每个节点和它的左右子节点、父节点。建好树后从根节点递归求得长度。我看了网络上的一些题解，也是使用了这种方法，这里就不再赘述。这里提供另一种解法。</p>
<p>2.观察题目，题目中输出的顺序要求是：“输出时从根结点开始：每行输出若干个结点字符（相同字符的个数等于该结点长度），如果该结点有左子树就递归输出左子树；如果该结点有右子树就递归输出右子树。”想一想，这不是就是先序遍历的递归顺序吗？正好题目中给出了先序遍历，这样就有了做法：</p>
<p>首先，先序遍历的第一个就是根节点，因此可以在中序遍历中找到根节点，分为左右子树进行递归求长度；递归中对于每一子树，从前到后枚举先序遍历的节点，并在子树中寻找，如果找到了那就是这颗子树的根(因为先序遍历是根在前)，再次递归。递归的边界条件是如果只有子树中只有一个节点就返回1。</p>
<p>示例程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">long a[256]; string q,z;</span><br><span class="line">long fl(long b,long e)</span><br><span class="line">&#123;</span><br><span class="line">    if (b&#x3D;&#x3D;e)&#x2F;&#x2F;判断边界条件</span><br><span class="line">    &#123;</span><br><span class="line">        for (long i&#x3D;0;i&lt;q.size();i++)</span><br><span class="line">            if (q[i]&#x3D;&#x3D;z[b]) </span><br><span class="line">            &#123;</span><br><span class="line">                a[i]&#x3D;1;</span><br><span class="line">                break;</span><br><span class="line">            &#125; </span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        for (long i&#x3D;0;i&lt;q.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for (long j&#x3D;b;j&lt;&#x3D;e;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (q[i]&#x3D;&#x3D;z[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    long lsl&#x3D;0,rsl&#x3D;0;</span><br><span class="line">                    if (j&gt;b) lsl&#x3D;fl(b,j-1);&#x2F;&#x2F;递归左子树</span><br><span class="line">                    if (j&lt;e) rsl&#x3D;fl(j+1,e);&#x2F;&#x2F;递归右子树</span><br><span class="line">                    a[i]&#x3D;lsl+rsl;</span><br><span class="line">                    return a[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;q&gt;&gt;z;</span><br><span class="line">    a[0]&#x3D;fl(0,z.size()-1);</span><br><span class="line">    for (long i&#x3D;0;i&lt;q.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (long j&#x3D;0;j&lt;a[i];j++)</span><br><span class="line">        cout&lt;&lt;q[i];</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>解题报告</tag>
      </tags>
  </entry>
  <entry>
    <title>c++学习错误总结板</title>
    <url>/2019/01/24/c++%E5%AD%A6%E4%B9%A0%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93%E6%9D%BF/</url>
    <content><![CDATA[<p>本板记录学习c++遇到过的坑，以避免犯同样的错误。</p>
<a id="more"></a>
<h4 id="数组越界"><a href="#数组越界" class="headerlink" title="数组越界"></a>数组越界</h4><p>出现题目：信息学奥赛一本通p1268,p1269,p1272</p>
<p>出现原因：</p>
<ul>
<li>c++的数组范围从0到n-1，如定义a[100]中如果访问a[100]是越界的，只到a[99]。mingw编译器在出现这种错误的时候会输出正确的答案，因此很难调试出来，且样例数据普遍较小，更增加了难度。</li>
<li>题目中出现了多个数据范围时应谨慎审题后确认哪个数组用哪个范围。</li>
</ul>
<p>出现危害：<br>导致了大量的无谓调试，一定要注意这种问题！</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>经验总结</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划之背包（未完结）</title>
    <url>/2019/01/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E8%83%8C%E5%8C%85(%E6%9C%AA%E5%AE%8C%E7%BB%93)/</url>
    <content><![CDATA[<p>背包问题是动态规划里的经典问题，大概分为01背包、完全背包和多重背包等三种。接下来一一介绍。需要注意的是，无论是背包问题还是其它动态规划问题，打表都是非常重要的步骤。如果大家有不明白或是程序出错要调试的时候，多多列表会带来很大帮助，不要因为懒而不列。</p>
<a id="more"></a>
<h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>有一个容量为m(m&lt;=200)的背包和n(n&lt;=30)个物品，第i件物品的重量为w[i]，价值为v[i]，请问怎样装能使背包内物品价值最大？(w,v各自的总和均小于c++long类型)</p>
<p>样例输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10 4</span><br><span class="line">2 1</span><br><span class="line">3 3</span><br><span class="line">4 5</span><br><span class="line">7 9</span><br></pre></td></tr></table></figure>
<p>样例输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>动态规划的问题要满足两个原则：无后效性原则和最优化原理。这里01背包问题是满足的，具体证明可自行百度，这里就不赘述了。<br>动态规划要知道状态、状态转移方程。这里以每个物品为状态，放或不放即为决策。如果用一个二维数组f[i][j]存储最优决策，表示前i个物品在占用小于j的重量的情况下的最大价值。</p>
<p>则状态转移方程：</p>
<p>当j&lt;w[i]时：<br>f[i][j]=f[i-1][j];(当前占用质量不足放入新物品，则不放)</p>
<p>当j&gt;=w[i]时：<br>f[i][j]=max(f[i-1][j],f[i-1][j-w[i]]+v[i]);(可以放入新物品，则选择值最大的)</p>
<p>进一步思考可以发现，我们最后想求的最大值只是最后一次选择后的结果，前面的结果并不需要储存。因此可以有空间优化，方程优化为：<br>f[j]=max(f[j],f[j-w[i]]+v[i]);<br>因此可以得到代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">long m,n,w[35],v[35],f[205];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">    for (long i&#x3D;0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    memset(f,0,sizeof(f));</span><br><span class="line">    for (long i&#x3D;0;i&lt;n;i++)</span><br><span class="line">        for (long j&#x3D;m;j&gt;&#x3D;0;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            if (j&gt;&#x3D;w[i])</span><br><span class="line">            f[j]&#x3D;max(f[j],f[j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    cout&lt;&lt;f[m];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里要注意，第二重循环要用逆序。为什么呢？这是因为我们要求的当前状态取决于前一个状态，即之前的物品放与不放。如果使用正序循环，则f[j-w[i]]很可能就已经是放了当前物品的结果，如果再放就会出现多次选择同一物品。这是与题意不符的。</p>
<h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3>]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title>公告栏</title>
    <url>/2018/12/22/%E5%85%AC%E5%91%8A%E6%A0%8F/</url>
    <content><![CDATA[<h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><p>欢迎收藏本博客！域名：<br><a href="https://alblog.xyz/">alblog.xyz</a></p>
]]></content>
      <categories>
        <category>帮助</category>
      </categories>
      <tags>
        <tag>博客事项</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown教程</title>
    <url>/2018/12/19/Markdown%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>(不定时更新)<br><del>这其实是本蒟蒻的练习</del><br>现在Markdown语法运用越来越普遍了，特别是这个博客要用到Markdown语法，所以就写了这个教程总结，可以自己随时查阅，也希望能帮助到其他人。</p>
<a id="more"></a>
<h1 id="基础语法："><a href="#基础语法：" class="headerlink" title="基础语法："></a>基础语法：</h1><h2 id="标题："><a href="#标题：" class="headerlink" title="标题："></a>标题：</h2><p>Markdown标题使用在标题前加“#”即可，“#”号数量代表标题级数，“#”号越多，标题字号越小，总共支持六级，如（为了不影响目录，这里只示例最小的两个标题）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##### 标题1</span><br><span class="line">###### 标题2</span><br></pre></td></tr></table></figure>
<p>  效果为：</p>
<h5 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h5><h6 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h6><hr>
<h2 id="分段及区块引用"><a href="#分段及区块引用" class="headerlink" title="分段及区块引用"></a>分段及区块引用</h2><p>分段的话前后空一行就行。</p>
<p>区块引用的话前加“&gt;”，如：<br>  <code>&gt;hello</code><br>显示为：</p>
<blockquote>
<p>hello</p>
</blockquote>
<hr>
<h2 id="插入链接或图片"><a href="#插入链接或图片" class="headerlink" title="插入链接或图片"></a>插入链接或图片</h2><p>这两种东西的语法很像，分别为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[链接文字](链接网址)</span><br><span class="line">![图片说明](图片网址)</span><br></pre></td></tr></table></figure>
<p>注意这里的网址都要包含https的完整格式，否则容易出错。<br>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[百度](https:&#x2F;&#x2F;www.baidu.com)</span><br><span class="line">![洛天依](https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2018&#x2F;05&#x2F;19&#x2F;CcqJcn.jpg)</span><br></pre></td></tr></table></figure>
<p>效果为：<br>  <a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a><br>  <img src="https://s1.ax1x.com/2018/05/19/CcqJcn.jpg" alt="洛天依"></p>
<hr>
<h2 id="列表（序号）"><a href="#列表（序号）" class="headerlink" title="列表（序号）"></a>列表（序号）</h2><p>markdown列表支持两种格式：有序列表和无序列表。</p>
<p>无序列表使用*或+或-标识</p>
<p>有序列表用数字加.标识（注意标识后都要有一个空格再跟内容）<br>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 内容1</span><br><span class="line">- 内容2</span><br><span class="line">- 内容3</span><br><span class="line">1.内容1</span><br><span class="line">2.内容2</span><br><span class="line">3.内容3</span><br></pre></td></tr></table></figure>
<p>实际显示效果如下：</p>
<ul>
<li>内容1</li>
<li>内容2</li>
<li>内容3</li>
</ul>
<ol>
<li>内容1</li>
<li>内容2</li>
<li>内容3</li>
</ol>
<p>ps：对于有序列表，序号有效的只有第一个，例如上例中第一个序号为1.，那么后面的序号就是2.，3.，以此类推。即使在代码中把2.改成4.，最终显示的也是2.。<br>注意：如果单一列表项中有多个项目，为保证渲染正常，段落首字与标识间最好保留4个空格（这个要自己尝试，不同地方显示效果不同）如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-    内容1</span><br><span class="line"></span><br><span class="line">     内容2</span><br><span class="line">-    内容3</span><br><span class="line">     </span><br><span class="line">     内容4</span><br></pre></td></tr></table></figure>
<p>实际效果：</p>
<ul>
<li><p>内容1</p>
<p>内容2</p>
</li>
<li><p>内容3</p>
<p>内容4</p>
</li>
</ul>
<p>同样对于对于列表中有区块引用的也应做相应缩进处理。<br>（因为列表这东西不同地方显示效果有细微差异，所以大家要针对自己的使用环境自行调试缩进，大概就是一个或两个制表符）</p>
<hr>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>有时为了排版漂亮，会在文章中加入分隔线（像本文中各个内容之间就有分隔线分隔）。markdown中加入分隔线非常简单，以下两种都可以：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">***</span><br></pre></td></tr></table></figure>
<p>但要注意如果在GitHub中使用的话，因为GitHub中标题也是“—”，所以分隔线前要空一行来区分。</p>
<h2 id="强调（加粗和斜体）"><a href="#强调（加粗和斜体）" class="headerlink" title="强调（加粗和斜体）"></a>强调（加粗和斜体）</h2><p>文本强调也是很常用到的功能，markdown中提供加粗和斜体，用*或_包裹即可，使用一个是斜体，两个是加粗。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**加粗**</span><br></pre></td></tr></table></figure>
<p>效果如下：<br>  <em>斜体</em><br>  <strong>加粗</strong><br>（注意这里符号和文本间不要空格！否则会被认为是列表）</p>
<hr>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>现在删除线也越来越流行了，markdown中加删除线只需将需要加删除线的文本前后用”~~”包裹即可。如文章第一句。</p>
<hr>
<h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="插入代码"><a href="#插入代码" class="headerlink" title="插入代码"></a>插入代码</h2><p>通过反引号（就是键盘左上角esc键下面那个。要英文符号！这很重要）。<br>一行三个反引号，下一行开始键入代码，最后再开一行三个反引号是比较稳妥的选择。（例子文中的代码示例就是）</p>
<h2 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h2><p>这是比较复杂的一个，有时还不如直接用excel做好了截图方便……但是还是要掌握。<br>语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1|1|1</span><br><span class="line">-|-|-</span><br><span class="line">1|1|1</span><br></pre></td></tr></table></figure>
<p>效果如下：<br>1|1|1<br>-|-|-<br>1|1|1<br>(因未知原因无法正常展示，请多多包涵，如有大佬知道原因请在评论区赐教！)<br>表格第一行为标题行，下面一行控制本列格式，每个格里至少有一条”-“，”-“前加”:”表示左对齐，前后加是居中对齐，后加是右对齐，标题默认居中对齐，内容默认左对齐，内容下不能跟控制行，否则会被认为是内容。</p>
<hr>
<h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><p>特殊符号即指markdown中用于控制的符号，如果要输出这些符号本身，则在前面加反斜杠”\”即可。<br>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\\</span><br><span class="line">\!</span><br></pre></td></tr></table></figure>
<p>显示效果：</p>
<p>\</p>
<p>!</p>
<p>特殊符号主要有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">&#96;   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h1><p>注意事项基本上文中都有讲，这里补充一些写的时候遇到过的坑。</p>
<ol>
<li>markdown在不同编辑器、显示环境下表现差异较大，经常出现编辑器预览和最终效果不同甚至差异很大的情况，因此建议先在要使用的显示环境下进行试验再发布。</li>
<li>markdown中大部分语法对空格要求很严，大部分符号前都要加空格，但有些一定不能加，具体看文中示例。通常代码没有生效就是忘了空格，显示效果错误就是加多了空格。</li>
</ol>
<hr>
<h1 id="原创文章，转载请注明出处。"><a href="#原创文章，转载请注明出处。" class="headerlink" title="原创文章，转载请注明出处。"></a>原创文章，转载请注明出处。</h1>]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
